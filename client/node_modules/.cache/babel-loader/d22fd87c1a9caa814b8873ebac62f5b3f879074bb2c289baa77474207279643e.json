{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { defineStore } from 'pinia';\nexport const useTaskStore = defineStore('taskStore', {\n  state: () => ({\n    tasks: []\n  }),\n  actions: {\n    async getTask() {\n      axios.get(`https://jsonplaceholder.typicode.com/todos`).then(res => {\n        this.tasks = res.data;\n        console.log(this.tasks + 'Finally made the call!');\n      }).catch(error => console.log(error));\n    },\n    async addTask(task) {\n      this - this.tasks.push(task);\n      const res = await fetch('https://jsonplaceholder.typicode.com/todos', {\n        method: 'POST',\n        body: JSON.stringify(task),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (res.error) {\n        console.log(res.error);\n      }\n    },\n    async deleteTask(id) {\n      this.tasks = this.tasks.filter(task => {\n        return task.id !== id;\n      });\n      const res = await fetch('https://jsonplaceholder.typicode.com/todos' + id, {\n        method: 'DELETE'\n      });\n      if (res.error) {\n        console.log(res.error);\n      }\n    }\n  }\n});","map":{"version":3,"names":["axios","defineStore","useTaskStore","state","tasks","actions","getTask","get","then","res","data","console","log","catch","error","addTask","task","push","fetch","method","body","JSON","stringify","headers","deleteTask","id","filter"],"sources":["/Users/dittmannja/dev/UÌˆbungen/TaskTrackerApp/nestjs_travery/TaskTracker-1/nest-rest-api/client/src/stores/TaskStore.js"],"sourcesContent":["import axios from 'axios';\nimport { defineStore } from 'pinia';\n\nexport const useTaskStore = defineStore('taskStore', {\n  state: () => ({\n    tasks: [],\n  }),\n  actions: {\n    async getTask() {\n      axios\n        .get(`https://jsonplaceholder.typicode.com/todos`)\n        .then((res) => {\n          this.tasks = res.data;\n          console.log(this.tasks + 'Finally made the call!');\n        })\n        .catch((error) => console.log(error));\n    },\n    async addTask(task) {\n      this - this.tasks.push(task);\n\n      const res = await fetch('https://jsonplaceholder.typicode.com/todos', {\n        method: 'POST',\n        body: JSON.stringify(task),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (res.error) {\n        console.log(res.error);\n      }\n    },\n    async deleteTask(id) {\n      this.tasks = this.tasks.filter((task) => {\n        return task.id !== id;\n      });\n\n      const res = await fetch(\n        'https://jsonplaceholder.typicode.com/todos' + id,\n        {\n          method: 'DELETE',\n        },\n      );\n      if (res.error) {\n        console.log(res.error);\n      }\n    },\n  },\n});\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,OAAO;AAEnC,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC,WAAW,EAAE;EACnDE,KAAK,EAAEA,CAAA,MAAO;IACZC,KAAK,EAAE;EACT,CAAC,CAAC;EACFC,OAAO,EAAE;IACP,MAAMC,OAAOA,CAAA,EAAG;MACdN,KAAK,CACFO,GAAG,CAAE,4CAA2C,CAAC,CACjDC,IAAI,CAAEC,GAAG,IAAK;QACb,IAAI,CAACL,KAAK,GAAGK,GAAG,CAACC,IAAI;QACrBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,KAAK,GAAG,wBAAwB,CAAC;MACpD,CAAC,CAAC,CACDS,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,MAAMC,OAAOA,CAACC,IAAI,EAAE;MAClB,IAAI,GAAG,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACD,IAAI,CAAC;MAE5B,MAAMP,GAAG,GAAG,MAAMS,KAAK,CAAC,4CAA4C,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;QAC1BO,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MAEF,IAAId,GAAG,CAACK,KAAK,EAAE;QACbH,OAAO,CAACC,GAAG,CAACH,GAAG,CAACK,KAAK,CAAC;MACxB;IACF,CAAC;IACD,MAAMU,UAAUA,CAACC,EAAE,EAAE;MACnB,IAAI,CAACrB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACsB,MAAM,CAAEV,IAAI,IAAK;QACvC,OAAOA,IAAI,CAACS,EAAE,KAAKA,EAAE;MACvB,CAAC,CAAC;MAEF,MAAMhB,GAAG,GAAG,MAAMS,KAAK,CACrB,4CAA4C,GAAGO,EAAE,EACjD;QACEN,MAAM,EAAE;MACV,CACF,CAAC;MACD,IAAIV,GAAG,CAACK,KAAK,EAAE;QACbH,OAAO,CAACC,GAAG,CAACH,GAAG,CAACK,KAAK,CAAC;MACxB;IACF;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}